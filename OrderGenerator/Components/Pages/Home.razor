@page "/"
@using OrderGenerator.Components.Components
@using OrderGenerator.Services.Interfaces
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@inject IOrderService OrderService
@inject IJSRuntime JSRuntime


<PageTitle>Home</PageTitle>

<h1>Nova Ordem</h1>



<EditForm Model="@model" FormName="addOrder" OnSubmit="@(OrderPost)" class="align-content-center">

    <div class="form-group col-6">
        <label for="asset">Ativo</label>
        <InputSelect id="asset" @bind-Value="model.ativo" class="form-control">
            @foreach (var value in Enum.GetValues(typeof(AssetsList)))
            {
                <option>@value</option>
            }
        </InputSelect>
    </div>


    <label for="Side" class="mt-3">Lado</label>
    <div class="form-group col-6">
        <InputRadioGroup @bind-Value="@model.lado">
            <InputRadio Value="SideValues.First()" />
            Compra
            <InputRadio Value="SideValues[1]" />
            Venda
        </InputRadioGroup>
    </div>

    <div class="form-group col-6 mt-3">
        <label for="quantity">Quantidade</label>
        <InputNumber id="quantity" @bind-Value="model.quantidade" class="form-control"></InputNumber>
    </div>

    <div class="form-group col-6 mt-3">
        <label for="amount">Preço</label>
        <InputNumber id="price" @bind-Value="model.preco" class="form-control" min="0.01" max="999.99" step="0.01" />
        <ValidationMessage For="@(() => model.preco)" />
    </div>

    <input type="submit" value="Adicionar" class="btn btn-primary mt-2" />

</EditForm>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private bool showModal;

    [SupplyParameterFromForm]
    public Order? model { get; set; }
    public List<string> SideValues = new List<string> { "C", "V" };

    protected override void OnInitialized()
    {
        model ??= new();
    }


    private async Task OrderPost()
    {
        var result = await OrderService.AddOrder(model);

        if (result.sucesso)
            model = new();

        var parameters = new ModalParameters()
            .Add(nameof(ModalResultOrder.Message), result.msg_erro)
            .Add(nameof(ModalResultOrder.CurrentExposure),
                    result.exposicao_atual == null ? String.Empty : result.exposicao_atual.ToString());

        var teste = Modal.Show<ModalResultOrder>("Ordem", parameters);
    }

    private void OnChangeSide(string option)
    {
        model.lado = option;
    }

    private async Task HandleModalClose()
    {
        showModal = false;
    }
}

<BlazoredModal></BlazoredModal>
