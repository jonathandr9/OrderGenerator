@page "/weather"
@using OrderGenerator.Services.Interfaces
@attribute [StreamRendering]
@inject IOrderService OrderService

<PageTitle>Histórcio Ordens</PageTitle>

<h1>Histórico</h1>

<p>Listagens de todas as Ordens Realizadas</p>

@if (ordersList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ativo</th>
                <th>Lado</th>
                <th>Quantidade</th>
                <th>Preco</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in ordersList.ordens)
            {
                <tr>
                    <td>@order.ativo</td>
                    <td>@order.lado</td>
                    <td>@order.quantidade</td>
                    <td>@order.preco</td>
                    <td>@order.data</td>                    
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private OrdersList ordersList;
    // private readonly IOrderService _orderService;

    // public Weather(IOrderService orderService)
    // {
    //     _orderService = orderService;
    //     ordersList = new OrdersList();
    // }

    protected override async Task OnInitializedAsync()
    {
        ordersList = await OrderService.GetOrders();

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        // {
        //     Date = startDate.AddDays(index),
        //     TemperatureC = Random.Shared.Next(-20, 55),
        //     Summary = summaries[Random.Shared.Next(summaries.Length)]
        // }).ToArray();


    }
}
